#!/usr/bin/env bash
# completes

set -e

check_url() {
  status_code=$(curl -o /dev/null --silent --head --write-out '%{http_code}' "$1")
  if [ "$status_code" = "404" ]; then
    echo "$VERSION was not found on swift.org."
    echo "  $1"
    exit 1
  elif [ "$status_code" != "200" ]; then
    echo "There was a network problem retreiving $VERSION, server returned $status_code."
    echo "  $1"
    exit 1
  fi
}

get_platform() {
  if [ -n "$PLATFORM" ]; then
    echo "$PLATFORM"
    return
  fi

  case $(uname) in
  'Linux' )
    if command -v "lsb_release" >/dev/null 2>&1; then
      if [ $(lsb_release -is) = "Ubuntu" ]; then
        echo "ubuntu$(lsb_release -rs)"
      else
        echo "unsupported-platform"
      fi
    elif [ -r "/etc/lsb-release" ]; then
      echo "The `lsb_release` command line tool is missing. `/etc/lsb-release` file is found."
      exit 1
    fi
    ;;
  'Darwin' )
    echo "osx"
    ;;
  * )
    echo "unsupported-platform"
    ;;
  esac
}

# Install a tarball binary from the supplied URL
install_tar_binary() {
  local VERSION
  local URL
  VERSION="$1"
  URL="$2"
  check_url "$URL"

  mkdir -p "$TMPDIR/swiftenv-$VERSION"

  echo "Downloading $URL"
  curl "$URL" -s | tar xz -C "$TMPDIR/swiftenv-$VERSION"

  DESTINATION="$SWIFTENV_ROOT/versions/$VERSION"
  mv "$TMPDIR/swiftenv-$VERSION/swift-$VERSION_RELEASE"* "$DESTINATION"
}

# Installs an `.pkg` binary from the supplied URL
install_pkg_binary() {
  local URL
  URL="$1"
  check_url "$URL"

  echo "Downloading $URL"
  curl -Lo "$TMPDIR/swiftenv-$VERSION.pkg" "$URL"

  sudo installer -pkg "$TMPDIR/swiftenv-$VERSION.pkg" -target /
}

# Install the given version from source
install_source() {
  VERSION="$1"

  if $clean; then
    swiftenv-build --clean "$VERSION" "$SWIFTENV_ROOT/versions/$VERSION"
  else
    swiftenv-build --no-clean "$VERSION" "$SWIFTENV_ROOT/versions/$VERSION"
  fi
}

clean=true
list=false
snapshots=false
build=auto
verbose=false

unset SKIP_EXISTING

for args in "$@"; do
  if [ "$args" = "--no-clean" ]; then
    clean=false
  elif [ "$args" = "--clean" ]; then
    clean=true
  elif [ "$args" = "--list" ]; then
    list=true
  elif [ "$args" = "--list-snapshots" ]; then
    list=true
    snapshots=true
  elif [ "$args" = "--complete" ]; then
    list=true
  elif [ "$args" = "--build" ]; then
    build=true
  elif [ "$args" = "--no-build" ]; then
    build=false
  elif [ "$args" = "--skip-existing" ] || [ "$args" = "-s" ]; then
    SKIP_EXISTING=true
  elif [ "$args" = "--verbose" ]; then
    verbose=true
  else
    VERSION="$args"
  fi

  shift
done

vlog() {
  if $verbose; then
    echo "$1"
  fi
}

if $list; then
  if $snapshots; then
    curl -H 'Accept: text/plain' "https://swiftenv-api.fuller.li/versions?snapshot=true&platform=$(get_platform)"
    exit
  fi

  swiftenv-build --definitions
  exit
fi

mkdir -p "$SWIFTENV_ROOT/versions"
if [ -z "$VERSION" ] ; then
  VERSION="$(swiftenv-version-name --dont-check)"

  if [ "$VERSION" == "system" ]; then
    echo "Usage: swiftenv install <version>"
    exit 1
  fi
fi

if [ -z "$TMPDIR" ] ; then
  export TMPDIR=/tmp
fi

if [[ "$VERSION" == "https://"* ]]; then
  URL="$VERSION"
  VERSION="${URL##*/}"
  VERSION="${VERSION%-*}"
fi

VERSION="${VERSION##swift-}"

PREFIX="$(swiftenv-prefix "$VERSION" || true)"
if [ -d "$PREFIX" ]; then
  echo "$VERSION is already installed."

  if [ -n "$SKIP_EXISTING" ]; then
    exit 0
  fi

  exit 1
fi

# Detect URL for potential binary version
if ([ "$build" == "auto" ] || [ "$build" == "false" ]) && [ -z "$URL" ]; then
  vlog "Checking for a URL for the $VERSION on $(get_platform)."

  status_code=$(curl -o /dev/null --silent --head --write-out '%{http_code}' "https://swiftenv-api.fuller.li/versions/$VERSION/binaries/$(get_platform)")

  if [ "$status_code" = "404" ]; then
    vlog "Did not find a binary release for $VERSION on $(get_platform)."
  elif [ "$status_code" = "200" ]; then
    URL="$(curl --silent https://swiftenv-api.fuller.li/versions/$VERSION/binaries/$(get_platform) -H 'Accept: text/plain')"
    vlog "Found $URL for $VERSION on $(get_platform)."
  else
    echo "There was a problem checking for a binary release of $VERSION, server returned $status_code."
    exit 1
  fi
fi

if [ "$build" == "auto" ]; then
  if [ -z "$VERSION" ] && [ -n "$URL" ]; then
    # URLs are always binary
    build=false
  elif [ -r "$SWIFTENV_SOURCE_PATH/share/swiftenv-build/$VERSION" ] && [ -z "$URL" ]; then
    build=true
  elif [ -z "$URL" ]; then
    echo "Failed to find a binary release for $VERSION on $(get_platform) or find build instructions for $VERSION."
    exit 1
  else
    build=false
  fi
fi

if [ "$build" == "true" ]; then
  if [ -n "$URL" ]; then
    echo 'The given URL must be to a binary version of Swift, you cannot use the `--build` option with a URL.'
    exit 1
  fi

  if [ -r "$SWIFTENV_SOURCE_PATH/share/swiftenv-build/$VERSION" ]; then
    vlog "Building $VERSION from source..."
    install_source "$VERSION"
    echo "$VERSION has been installed."
    swiftenv-rehash
    swiftenv-global "${VERSION##swift-}"
    exit 0
  fi

  echo "We don't have build instructions for $VERSION."
  exit 1
fi

if [[ "$URL" = *".pkg" ]]; then
  if [ "$(uname)" != "Darwin" ]; then
    echo "Cannot install $URL on non macOS platform $(uname)."
    exit 1
  fi

  install_pkg_binary "$URL"
elif [[ "$URL" = *".tar.gz" ]]; then
  install_tar_binary "$VERSION" "$URL"
else
  echo "swiftenv does not know how to install $URL."
  exit 1
fi

echo "$VERSION has been installed."
swiftenv-rehash
swiftenv-global "$VERSION"
